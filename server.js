const express = require('express');
const cors = require('cors');
const bodyParser = require('body-parser');
const path = require('path');
const { v4: uuidv4 } = require('uuid');

const app = express();
const PORT = process.env.PORT || 3000;

// Middleware
app.use(cors());
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: true }));
app.use(express.static('.'));

// In-memory storage for audiobooks (in production, use a database)
// Note: In Vercel's serverless environment, this will reset between requests
let audiobooks = [];

// For production, consider using a database like MongoDB, PostgreSQL, or Vercel KV

// Routes
app.get('/', (req, res) => {
    res.sendFile(path.join(__dirname, 'index.html'));
});

app.get('/privacy.html', (req, res) => {
    res.sendFile(path.join(__dirname, 'privacy.html'));
});

// Get all audiobooks
app.get('/api/audiobooks', (req, res) => {
    res.json(audiobooks);
});

// Create new audiobook
app.post('/api/audiobooks', (req, res) => {
    const { title, content, author, voice, rate } = req.body;
    
    if (!title || !content) {
        return res.status(400).json({ error: 'Title and content are required' });
    }

    const audiobook = {
        id: uuidv4(),
        title,
        content,
        author: author || 'Anonymous',
        voice: voice || null,
        rate: rate || 0.9,
        createdAt: new Date().toISOString(),
        audioUrl: null // Will be generated by frontend TTS
    };

    audiobooks.push(audiobook);
    res.status(201).json(audiobook);
});

// Get specific audiobook
app.get('/api/audiobooks/:id', (req, res) => {
    const audiobook = audiobooks.find(ab => ab.id === req.params.id);
    if (!audiobook) {
        return res.status(404).json({ error: 'Audiobook not found' });
    }
    res.json(audiobook);
});

// Delete audiobook
app.delete('/api/audiobooks/:id', (req, res) => {
    const index = audiobooks.findIndex(ab => ab.id === req.params.id);
    if (index === -1) {
        return res.status(404).json({ error: 'Audiobook not found' });
    }
    audiobooks.splice(index, 1);
    res.json({ message: 'Audiobook deleted successfully' });
});

// For Vercel deployment, export the app
module.exports = app;

// Only start the server if not in production (Vercel handles this)
if (process.env.NODE_ENV !== 'production') {
    app.listen(PORT, () => {
        console.log(`Server running on http://localhost:${PORT}`);
    });
} 